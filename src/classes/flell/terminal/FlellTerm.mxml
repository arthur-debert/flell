<?xml version="1.0" encoding="utf-8"?>
<flell:DragPanel  xmlns:flell="flell.terminal.*" layout="absolute" width="800" height="400" xmlns:mx="http://www.adobe.com/2006/mxml">
    <mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" x="0" y="0" width="780" height="360" creationComplete="onCreationComplete()">
        <mx:HBox width="100%" height="20">
            <mx:Button label="clear" id="clearButton"/>
            <mx:Button label="copy" id="copyButton"/>
        </mx:HBox>
        <flell:OpenTextArea width="780" height="380" text="" id="outText" />
        
    </mx:VBox>
    
    <mx:Script>
        <![CDATA[
            import flell.tests.FlellTestSuite;
            import flell.tests.BaseFlellTestCase;
            import flell.CompletionResult;
            import mx.messaging.channels.StreamingAMFChannel;
            import flell.Shell;
            
            public var shell : Shell;
            
            public static var SHELL_DELIMETER : String = "$";
            
            public function onCreationComplete() : void{
                clearButton.addEventListener(MouseEvent.CLICK, clearTerm);
                copyButton.addEventListener(MouseEvent.CLICK, copyText);
                outText.addEventListener(TextEvent.TEXT_INPUT, onInputText, true);
                outText.addEventListener(KeyboardEvent.KEY_UP, onControlKeyPressed, true, int.MIN_VALUE, true);
                
                shell = new Shell();
                shell.init(this.stage);
                clearTerm();    

                tabEnabled = tabChildren = false;
                outText.setFocus();
                focusManager.deactivate();
                FlellTestSuite.stage = stage;
                var t : BaseFlellTestCase = new BaseFlellTestCase("fdf");
                t.setUp();
            }
            
            
            public function clearTerm(e: Event = null) : void{
                outText.text = SHELL_DELIMETER;
                moveCursorToEnd();
            }
            
            public function copyText(e : Event = null) : void{
                
            }
            
            
            public function getLastLine() : String{
                
                var lines : Array = outText.text.split("\r");
                 var lastLine : String = lines[lines.length -1]; 
                return lastLine.substring(lastLine.indexOf(SHELL_DELIMETER)+1);
            }
            
            public function getNumberLines () : int{
                return outText.text.split("\r").length;
            }
            
            public function replaceLastLine(newValue : String):void{
                var lines : Array = outText.text.split("\r").slice(0, getNumberLines() - 1);
                var lastLine : String = getDelimeter() + newValue;
                lines.push(lastLine);
                outText.text = lines.join("\r");
                
            }
            public function addToOutput(text : String) : void{
                outText.text +=  "\r"+ text + "\r" + getDelimeter();
            }
            
            public function getDelimeter() : String{
                return SHELL_DELIMETER;
            }
            public function completeLineWith(completion : String) : void{
                var commandRaw : String = getLastLine();
                var lines : Array = outText.text.split("\r");  
                lines[lines.length -1 ]  = getDelimeter() + commandRaw.substring(0, commandRaw.lastIndexOf(" ") + 1) + completion;
                outText.text = lines.join("\r");
                moveCursorToEnd();
            }
            
            public function getTextAfterMarker() : String{
                var lastLine : String = getLastLine();
                return lastLine.substring(0, lastLine.indexOf(SHELL_DELIMETER));
            }
            
            public function moveCursorToEnd() : void{
                outText.setSelection(outText.text.length,outText.text.length );
            }
            
            public function onInputText ( e : TextEvent) : void{
                
                var charCode : int = e.text.charCodeAt(0);
                if ( charCode == Keyboard.ENTER || charCode == 10 ){
                    var rawCommand : String = getLastLine();
                    //trace("___raw command", rawCommand);
                    var out :String;
                    try{
                        out = shell.executeRaw(rawCommand);
                    }catch(e : Error){
                        out  = e.getStackTrace() || e.message;
                    }
                    addToOutput(out);
                    e.preventDefault();
                    moveCursorToEnd();
                }
                
            }
            
            public function handleTabPress(evt : KeyboardEvent) : void {
                var partialInput : String = getLastLine();
                var result : CompletionResult = shell.getCompletion(partialInput);
                if (result.type == CompletionResult.TYPE_ERROR){
                    trace("bad!");
                }else if (result.type == CompletionResult.TYPE_SINGLE){
                    completeLineWith(  result.results[0]);
                }else{
                    addToOutput(result.results.join(" "));
                    moveCursorToEnd();
                }
                evt.preventDefault();
            }
            
            public function handleKeyArrow(evt : KeyboardEvent):void{
                var isUp : Boolean = evt.keyCode == Keyboard.UP 
                
                
                var charIndex : int = outText.field.caretIndex;
                if(charIndex == outText.text.length){
                    charIndex --;
                }
                
                var historyCommand :String 
                if(isUp){
                    if (!shell.history.isFirst)
                        historyCommand = shell.history.previous();
                }else{
                    if (! shell.history.isLast){
                        historyCommand = shell.history.next();
                    }else{
                        historyCommand = "";
                    }
                        
                }
                if(historyCommand != null){
                    replaceLastLine(historyCommand);
                }
                moveCursorToEnd();
                
            }
            public function onControlKeyPressed( evt : KeyboardEvent) : void{
                
                
                //trace(outText.field.getLineIndexOfChar(outText.field.caretIndex));
                switch (evt.keyCode){
                    case Keyboard.TAB:
                        handleTabPress(evt);
                        break;
                     case Keyboard.UP:
                     case Keyboard.DOWN:   
                        
                        evt.preventDefault();
                        evt.stopImmediatePropagation();
                        handleKeyArrow(evt);
                        break;   
                } 
                evt.updateAfterEvent();
            }
        ]]>
    </mx:Script>
        
</flell:DragPanel>
